import webbrowser
from flask import Flask, render_template, request, jsonify
from g4f.client import Client
import threading
import logging
import os
import re
import requests

app = Flask(__name__)
client = Client()

# Set up basic logging
logging.basicConfig(level=logging.INFO)

# Define your company and bot names
company_name = "Rango Productions"
bot_name = "TurboTalk"

@app.route('/')
def index():
    # Render index.html from the current directory
    return render_template('ui.html')

@app.route('/chat', methods=['POST'])
def chat():
    try:
        if not request.is_json:
            logging.warning("Invalid content-type: expected application/json.")
            return jsonify({"response": "Invalid content-type. Please send a valid JSON request."}), 400
        
        user_message = request.json.get('message')
        behaviour = request.json.get('behaviour')

        logging.info("User Message: %s, Behaviour: %s", user_message, behaviour)

        # Validate inputs
        if not user_message or not behaviour:
            logging.warning("Invalid input: %s", request.json)
            return jsonify({"response": "Please provide both a message and select a behavior."}), 400

        # Construct the AI's prompt
        content = (
    f"Follow these commands strictly. {user_message} and respond very strongly like a {behaviour} type person, "
    f"since I am a {behaviour} person. If asked about your identity or for any info about yourself, "
    f"introduce yourself as {bot_name} from {company_name}, explain that you're in a development stage and share how "
    f"powerful the company will be in the future. Only do this if specifically asked. Otherwise, do not reveal any details. "
    f"Answer in English unless a different language is specified."
)

        # Call the AI client
        response = client.chat.completions.create(
            model="gpt-4o",  # Corrected model name
            messages=[{"role": "user", "content": content}],
            best_of=10,
        )
        
        # Check if response contains error indicating connection issues with blackbox.ai
        if "Cannot connect to host www.blackbox.ai" in str(response):
            logging.error("Connection failed: Cannot connect to www.blackbox.ai.")
            return jsonify({"response": "There was an issue connecting to the server. Please reload the page and enter your message again."})

        # Get bot's response
        bot_response = response.choices[0].message.content if response.choices else "Sorry, I couldn't process your request at the moment. Please try again."

        # Remove unwanted text like "Generated by BLACKBOX.AI" and similar phrases
        bot_response = re.sub(r"(Generated by BLACKBOX\.AI, try unlimited chat https://www\.blackbox\.ai[\s\S]*)", "", bot_response)

        # Check if the bot response is blank or empty, and if so, return a custom message
        if not bot_response.strip():
            bot_response = (
                "Sorry for the inconvenience ðŸ˜” because of some technical issue. We weren't able to response you to this message, please try again later, after reloading the site."
            )

        # Check if the bot response contains the specific text to prompt for message re-entry
        if "Thank you for using BLACKBOX.AI" in bot_response:
            return jsonify({"response": "Please re-enter your message."})
            
        if "Model not found or too long input. Or any other error (xD)" in bot_response:
            return jsonify({"response": "Sorry for the inconvenience ðŸ˜” because of some technical issue. We weren't able to response you to this message, please try again later, after reloading the site."})

    except requests.exceptions.RequestException as e:
        # Handle specific network/connection issues
        logging.error("Network error: %s", str(e))
        return jsonify({"response": "Network error. Please check your internet connection or try again later."})

    except Exception as e:
        # General exception handler for any unexpected errors
        logging.error("Unexpected error: %s", str(e))
        return jsonify({"response": "An unexpected error occurred. Please try again later."})

    return jsonify({"response": bot_response})

def open_browser():
    webbrowser.open("http://127.0.0.1:8080")

if __name__ == '__main__':
    threading.Timer(1, open_browser).start()  # Open the browser after a short delay
    app.run(host='0.0.0.0', port=8080, debug=False)  # Enable debug mode
