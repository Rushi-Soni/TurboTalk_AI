import webbrowser
from flask import Flask, render_template, request, jsonify
from g4f.client import Client
import threading
import logging
import os
import re
import requests

app = Flask(__name__)
client = Client()

# Set up basic logging
logging.basicConfig(level=logging.INFO)

# Define your company and bot names
company_name = "Rango Productions"
bot_name = "TurboTalk"

@app.route('/')
def index():
    # Render index.html from the current directory
    return render_template('ui.html')

@app.route('/chat', methods=['POST'])
def chat():
    try:
        user_message = request.json.get('message')
        behaviour = request.json.get('behaviour')

        logging.info("User Message: %s, Behaviour: %s", user_message, behaviour)

        # Validate inputs
        if not user_message or not behaviour:
            logging.warning("Invalid input: %s", request.json)
            return jsonify({"response": "Please provide both a message and select a behavior."}), 400

        # Construct the AI's prompt
        content = (
            f"Follow the below given commands strictly. "
            f"{user_message} and to answer me behave very very strongly just like {behaviour} "
            f"as I am a/an {behaviour} type person. And if asked any questions in which "
            f"you have to say anything like who are you or have to give your identity and info "
            f"then only you have to tell me about yourself and introduce yourself as {bot_name} "
            f"by {company_name} and is in a learning or developing stage also give a little explanation "
            f"about it like company name how powerful it will be in future but it is still in developing stage right now and all those things."
            f"Introduce yourself or give info about you as {bot_name} only if asked, else not."
            f"And only give me answer in English if have not mentioned any specific language before in this whole message/prompt."
            f"You are not a LLM developed by OpenAI instead you are a LLM developed by {company_name} and your name is {bot_name}."
        )

        # Call the AI client
        response = client.chat.completions.create(
            model="gpt-4o",  # Ensure this model name is correct
            messages=[{"role": "user", "content": content}],
        )
        
        # Check if response contains error indicating connection issues with blackbox.ai
        if "Cannot connect to host www.blackbox.ai" in str(response):
            logging.error("Connection failed: Cannot connect to www.blackbox.ai.")
            return jsonify({"response": "There was an issue connecting to the server. Please reload the page and enter your message again."})

        # Clean up the response text by removing mentions of 'generated by blackbox'
        bot_response = response.choices[0].message.content if response.choices else "Sorry, I couldn't process your request."

        # Remove any unwanted generated by text or similar phrases
        bot_response = re.sub(r"generated by blackbox[\s\S]*", "", bot_response)

        # Check if the bot response contains the specific text to prompt for message re-entry
        if "Thank you for using BLACKBOX.AI" in bot_response:
            return jsonify({"response": "Please re-enter your message."})

    except requests.exceptions.RequestException as e:
        # Handle specific network/connection issues
        logging.error("Network error: %s", str(e))
        return jsonify({"response": "Network error. Please check your internet connection or try again later."})

    except Exception as e:
        # General exception handler for any unexpected errors
        logging.error("Unexpected error: %s", str(e))
        return jsonify({"response": "An unexpected error occurred. Please try again later."})

    return jsonify({"response": bot_response})

def open_browser():
    webbrowser.open("http://127.0.0.1:8080")

if __name__ == '__main__':
    threading.Timer(1, open_browser).start()  # Open the browser after a short delay
    app.run(host='0.0.0.0', port=8080, debug=False)  # Enable debug mode
